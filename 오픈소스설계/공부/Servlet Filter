# Servlet
  서버에서 실행되다가 웹 브라우저에서 요청을 하면 해당 기능을 수행한 후 웹 브라우저에 결과를 전송

# Servlet Filter?
  HTTP요청 -> WAS -> 필터1 -> 필터2 -> 필터3 -> Dispatcher Servlet -> 컨트롤러
  기본적인 필터는 dispatcherServlet 이전에 호출
  필터는 chain으로 구성되어 여러 개의 필터를 자유롭게 추가 가능
  필터에서 적절하지 않은 요청이라고 판단하면 dispatcherServlet을 호출하지 않고 요청을 끝낼 수 있음

# Filter Chain?
  여러 개의 필터가 체인을 형성하고 있는 필터의 묶음
  Servlet filter chain은 요청 URL path를 기반으로 HttpServletRequest를 처리하는데 Client가 Server 측
  애플리케이션에 요청을 전송하면 Servlet Container는 요청 URL의 경로를 기반으로 어떤 필터와 어떤 서블릿을 매핑할지 결정

  #1.1 웹 요청에서의 Servlet filter와 filter chain의 역할 (간단)
    javaa.servlet.Filter interface를 구현한 Servlet filter는 웹 요청을 가로채 전처리를 할 수 있으며,
    엔드 포인트에서 요청 처리가 끝난 후 응담에 대한 후처리 또한 가능
    하나 이상의 필터들을 연결하여 필터 체인을 구성할 수 있음
    
  #1.2 Spring Security에서의 filter 역할
    spring security에서는 filter를 통해 전처리 과정화 후처리 과정에서 보안 작업을 수행할 수 있음

    #1.2.1 DelegatingFilterProxy
      Filter interface를 구현하는 구현 클래스
      필터를 사용하는 시작점
      servlet container 영역의 필터와 어플리케이션에 Bean으로 등록된 필터들을 연결해주는 브릿지 역

    #1.2.2 FilterChainProxy
      보안을 위한 작업을 처리하는 필터의 모음
      spring security의 필터를 사용하기 위한 진입점으로 보안 필터들이 필요한 작업을 수행
      URL 별로 filter chain을 등록할 수 있는데, 이때 필터 체인의 우선순위는 FilterChainProxy에 의해 결정되며.
      가장 먼저 매칭된 filter chain을 사용
        o) /api/**과 /** filer chain이 있고 /api/message URL이 들어오는 경우, 가장 먼저 매칭된 /api/** filter chain을 사용
        o) /message/** URL인 경우, 가장 먼저 매칭되는 /** filter chiain을 사용

#1.3 Filter interface
  필터 인터페이스를 구현하고 등록하면 서블릿 컨테이너가 필터를 싱글톤 객체로 생성하고 관리한다.
  싱클톤 객체 : 클래스의 인스턴스가 1개만 생성되는 것을 보장함
  
  #1.3.1 Filter method
    init() : 필터 초기화 method, 서블릿 컨테이너가 생성될 때 호출
    @Override
    public void init(FilterConfig filterConfig) throws ServletException{
      javax.servlet.Filter.super.init(filterConfig);
    }
    (#) java.super vs super()
      super : 자신이 상속받은 부모를 가리키는 참조 변수
        자식 클래스는 부모클래스를 상속받았기 때문에 자유롭게 부모의 모든 property를 사용할 수 있음
        (#) property
          클래스 멤버의 일종으로, 속성을 의미
        자식과 부모사이의 구분이 있어야 함
        ex) ins.a = 2 / ins.super.a = 2
      super() : 자신이 상속받느 부모의 생성자를 호출하는 method
        상속에서의 생성자는 상속되지 않는 유일한 멤버함수
        부모클래스의 멤버를 초기화하기 위해선, 부모클래스의 생성자를 호출
        자식클래스 생성자를 호출할 때 부모클래스 생성자도 동시에 호출
  
    doFilter() : 고객의 요청이 올 때 마다 해당 메서드 호출, 필터의 로직을 구현
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,
                          FilterChain filterChain) throws IOException, ServletException {
    }
    doFilter() method는 parameter에 filterchain을 갖고 있음
    filterchain.doFilter(request, response); method를 호출하게 되면
    filter가 있으면 호출, 없으면 dispatcherServlet을 호출
    이 로직을 호출하지 않으면 다음 단계로 진행되지 않음, 반드시 호출
  
    destory() : 필터 종료 method, Servlet Container가 종료될 때 호출
    public void destory() {
      javax.servlet.Filter.super.destory();
    }
    (#) Servlet Container
      서버에 만들어진 서블릿이 스스로 작동하는 것이 아님, servlet을 관리 해주는 것이 필요

  #1.4 Filter registration
    @Bean
    public FilterRegistrationBean logFilter() {
      FilterRegistrationBean<Filter> filterRegistrationBean = new FilterRegistrationBeam<>();
      filterRegistrationBean.setFilter(new LogFilter()); // 등록할 필터를 지정
      filterRegistrationBean.setOrder(1); //필터 순서 설정
      filterRegistrationBean.addUrlPatterns("\*"); //필터가 적용될 URL 설정
  
      return filterRegistrationBean;
    }
    setFilter() : 등록할 필터를 지정
    setOrder() : 필터 체인 내에서 해당 필터의 순서를 지정
    addUrlPatterns() : 필터를 적용할 URL 패턴을 지정하며, 한번에 여러 패턴을 지정 가능



